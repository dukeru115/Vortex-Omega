#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Vortex-Omega
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –≤–∏–¥—ã —Ç–µ—Å—Ç–æ–≤ —Å –æ—Ç—á—ë—Ç–∞–º–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
VENV_PATH="${PROJECT_ROOT}/venv"
COVERAGE_THRESHOLD=80
REPORTS_DIR="${PROJECT_ROOT}/test-reports"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# –§–ª–∞–≥–∏
RUN_UNIT=true
RUN_INTEGRATION=true
RUN_PERFORMANCE=false
RUN_SECURITY=false
RUN_SMOKE=false
VERBOSE=false
PARALLEL=false
DOCKER_MODE=false

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
show_help() {
    cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $(basename "$0") [OPTIONS]

–û–ø—Ü–∏–∏:
    -u, --unit          –ó–∞–ø—É—Å—Ç–∏—Ç—å —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –¥–∞)
    -i, --integration   –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –¥–∞)
    -p, --performance   –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    -s, --security      –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    -m, --smoke         –ó–∞–ø—É—Å—Ç–∏—Ç—å smoke —Ç–µ—Å—Ç—ã
    -a, --all          –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
    -d, --docker       –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    -P, --parallel     –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    -v, --verbose      –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    -h, --help         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
    $(basename "$0")                    # –Æ–Ω–∏—Ç + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    $(basename "$0") --all              # –í—Å–µ —Ç–µ—Å—Ç—ã
    $(basename "$0") -up --parallel    # –Æ–Ω–∏—Ç + –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    $(basename "$0") --docker --all    # –í—Å–µ —Ç–µ—Å—Ç—ã –≤ Docker
EOF
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -u|--unit) RUN_UNIT=true; shift ;;
            -i|--integration) RUN_INTEGRATION=true; shift ;;
            -p|--performance) RUN_PERFORMANCE=true; shift ;;
            -s|--security) RUN_SECURITY=true; shift ;;
            -m|--smoke) RUN_SMOKE=true; shift ;;
            -a|--all)
                RUN_UNIT=true
                RUN_INTEGRATION=true
                RUN_PERFORMANCE=true
                RUN_SECURITY=true
                RUN_SMOKE=true
                shift ;;
            -d|--docker) DOCKER_MODE=true; shift ;;
            -P|--parallel) PARALLEL=true; shift ;;
            -v|--verbose) VERBOSE=true; shift ;;
            -h|--help) show_help; exit 0 ;;
            *) log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"; show_help; exit 1 ;;
        esac
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if [ "$DOCKER_MODE" = true ]; then
        if ! command -v docker &> /dev/null; then
            log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            exit 1
        fi
        
        if ! command -v docker-compose &> /dev/null; then
            log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            exit 1
        fi
    else
        if [ ! -d "$VENV_PATH" ]; then
            log_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞—é..."
            python3 -m venv "$VENV_PATH"
        fi
        
        source "$VENV_PATH/bin/activate"
        
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        pip install -q --upgrade pip
        pip install -q -r "${PROJECT_ROOT}/requirements.txt"
        pip install -q -r "${PROJECT_ROOT}/requirements-dev.txt"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
    mkdir -p "$REPORTS_DIR"
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤
run_unit_tests() {
    log_info "üß™ –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤..."
    
    if [ "$DOCKER_MODE" = true ]; then
        docker-compose run --rm vortex-test pytest tests/unit/ \
            -v \
            --cov=src \
            --cov-report=xml:${REPORTS_DIR}/coverage_unit.xml \
            --cov-report=html:${REPORTS_DIR}/htmlcov_unit \
            --junitxml=${REPORTS_DIR}/junit_unit.xml
    else
        pytest tests/unit/ \
            $([ "$VERBOSE" = true ] && echo "-vv" || echo "-v") \
            $([ "$PARALLEL" = true ] && echo "-n auto") \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml:${REPORTS_DIR}/coverage_unit.xml \
            --cov-report=html:${REPORTS_DIR}/htmlcov_unit \
            --junitxml=${REPORTS_DIR}/junit_unit.xml \
            --tb=short
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
    coverage_percent=$(python -c "
import xml.etree.ElementTree as ET
tree = ET.parse('${REPORTS_DIR}/coverage_unit.xml')
root = tree.getroot()
coverage = float(root.attrib.get('line-rate', 0)) * 100
print(f'{coverage:.1f}')
")
    
    if (( $(echo "$coverage_percent < $COVERAGE_THRESHOLD" | bc -l) )); then
        log_warning "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ ($coverage_percent%) –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ($COVERAGE_THRESHOLD%)"
    else
        log_success "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: $coverage_percent%"
    fi
    
    log_success "–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
run_integration_tests() {
    log_info "üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    
    if [ "$DOCKER_MODE" = true ]; then
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        docker-compose up -d postgres redis
        sleep 10
        
        docker-compose run --rm vortex-test pytest tests/integration/ \
            -v \
            --junitxml=${REPORTS_DIR}/junit_integration.xml
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        docker-compose down
    else
        # –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        log_warning "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∏ Redis –∑–∞–ø—É—â–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ"
        
        pytest tests/integration/ \
            $([ "$VERBOSE" = true ] && echo "-vv" || echo "-v") \
            --junitxml=${REPORTS_DIR}/junit_integration.xml \
            --tb=short
    fi
    
    log_success "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
run_performance_tests() {
    log_info "‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    
    if [ ! -f "${PROJECT_ROOT}/tests/performance/test_performance.py" ]; then
        log_warning "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—é –∑–∞–≥–ª—É—à–∫—É..."
        mkdir -p "${PROJECT_ROOT}/tests/performance"
        cat > "${PROJECT_ROOT}/tests/performance/test_performance.py" << 'EOF'
import pytest
import time

def test_symbolic_processing_speed(benchmark):
    """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Symbolic AI"""
    def process():
        time.sleep(0.01)  # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return "processed"
    
    result = benchmark(process)
    assert result == "processed"

def test_esc_buffer_performance(benchmark):
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ESC –±—É—Ñ–µ—Ä–æ–≤"""
    def buffer_ops():
        data = list(range(1000))
        return sum(data)
    
    result = benchmark(buffer_ops)
    assert result == 499500
EOF
    fi
    
    pytest tests/performance/ \
        --benchmark-only \
        --benchmark-json=${REPORTS_DIR}/benchmark_${TIMESTAMP}.json \
        --benchmark-autosave
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if [ -f "${REPORTS_DIR}/benchmark_${TIMESTAMP}.json" ]; then
        python -c "
import json
with open('${REPORTS_DIR}/benchmark_${TIMESTAMP}.json') as f:
    data = json.load(f)
    for bench in data['benchmarks']:
        print(f\"  - {bench['name']}: {bench['stats']['mean']*1000:.2f}ms (median: {bench['stats']['median']*1000:.2f}ms)\")
"
    fi
    
    log_success "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
run_security_tests() {
    log_info "üîê –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    
    # Bandit –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
    log_info "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å Bandit..."
    bandit -r src/ -f json -o ${REPORTS_DIR}/bandit_report.json || true
    
    # Safety –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å Safety..."
    safety check -r requirements.txt --json > ${REPORTS_DIR}/safety_report.json || true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–∫—Ä–µ—Ç—ã
    log_info "–ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ..."
    if command -v trufflehog &> /dev/null; then
        trufflehog git file://. --only-verified --json > ${REPORTS_DIR}/secrets_report.json || true
    else
        log_warning "TruffleHog –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–∫—Ä–µ—Ç–æ–≤"
    fi
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    python -c "
import json
import sys

issues_found = False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Bandit
try:
    with open('${REPORTS_DIR}/bandit_report.json') as f:
        bandit_data = json.load(f)
        if bandit_data.get('results'):
            print('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ:')
            for issue in bandit_data['results'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f\"  - {issue['issue_text']} ({issue['issue_severity']})\")
            issues_found = True
except:
    pass

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Safety
try:
    with open('${REPORTS_DIR}/safety_report.json') as f:
        safety_data = json.load(f)
        if safety_data:
            print('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:')
            for vuln in safety_data[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f\"  - {vuln.get('package', 'Unknown')}: {vuln.get('vulnerability', 'Unknown')}\")
            issues_found = True
except:
    pass

if not issues_found:
    print('‚úÖ –ü—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
"
    
    log_success "–ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤
run_smoke_tests() {
    log_info "üî• –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    if [ "$DOCKER_MODE" = true ]; then
        docker-compose up -d vortex-omega
        sleep 15
        
        BASE_URL="http://localhost:8080"
    else
        log_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥ smoke —Ç–µ—Å—Ç–∞–º–∏"
        BASE_URL="http://localhost:8080"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint..."
    if curl -f -s "${BASE_URL}/health" > /dev/null; then
        log_success "Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "Health endpoint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ metrics endpoint
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ metrics endpoint..."
    if curl -f -s "${BASE_URL}/metrics" > /dev/null; then
        log_success "Metrics endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "Metrics endpoint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    if [ "$DOCKER_MODE" = true ]; then
        docker-compose down
    fi
    
    log_success "Smoke —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
generate_report() {
    log_info "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞..."
    
    cat > "${REPORTS_DIR}/test_summary_${TIMESTAMP}.md" << EOF
# –û—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Vortex-Omega

**–î–∞—Ç–∞:** $(date)
**–í–µ—Ä—Å–∏—è:** $(git describe --tags --always 2>/dev/null || echo "unknown")
**–í–µ—Ç–∫–∞:** $(git branch --show-current 2>/dev/null || echo "unknown")

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤

| –¢–∏–ø —Ç–µ—Å—Ç–∞ | –°—Ç–∞—Ç—É—Å | –î–µ—Ç–∞–ª–∏ |
|-----------|--------|--------|
| –Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã | $([ -f "${REPORTS_DIR}/junit_unit.xml" ] && echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ã" || echo "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã") | [–û—Ç—á—ë—Ç](./junit_unit.xml) |
| –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ | $([ -f "${REPORTS_DIR}/junit_integration.xml" ] && echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ã" || echo "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã") | [–û—Ç—á—ë—Ç](./junit_integration.xml) |
| –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | $([ -f "${REPORTS_DIR}/benchmark_${TIMESTAMP}.json" ] && echo "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω—ã" || echo "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã") | [–ë–µ–Ω—á–º–∞—Ä–∫–∏](./benchmark_${TIMESTAMP}.json) |
| –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å | $([ -f "${REPORTS_DIR}/bandit_report.json" ] && echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã" || echo "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã") | [–û—Ç—á—ë—Ç](./bandit_report.json) |
| Smoke | $([ "$RUN_SMOKE" = true ] && echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ã" || echo "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã") | - |

## –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞

$([ -f "${REPORTS_DIR}/coverage_unit.xml" ] && echo "–ü–æ–∫—Ä—ã—Ç–∏–µ: ${coverage_percent}%" || echo "–ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–µ –∏–∑–º–µ—Ä–µ–Ω–æ")

## –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã

- [HTML –æ—Ç—á—ë—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏](./htmlcov_unit/index.html)
- [XML –æ—Ç—á—ë—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏](./coverage_unit.xml)
- [JUnit –æ—Ç—á—ë—Ç—ã](./junit_*.xml)

---
*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–º run-tests.sh*
EOF
    
    log_success "–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ ${REPORTS_DIR}/test_summary_${TIMESTAMP}.md"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Vortex-Omega..."
    
    cd "$PROJECT_ROOT"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if [ "$PARALLEL" = true ]; then
        log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ..."
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        ([ "$RUN_UNIT" = true ] && run_unit_tests) &
        ([ "$RUN_INTEGRATION" = true ] && run_integration_tests) &
        ([ "$RUN_PERFORMANCE" = true ] && run_performance_tests) &
        ([ "$RUN_SECURITY" = true ] && run_security_tests) &
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        wait
        
        [ "$RUN_SMOKE" = true ] && run_smoke_tests
    else
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        [ "$RUN_UNIT" = true ] && run_unit_tests
        [ "$RUN_INTEGRATION" = true ] && run_integration_tests
        [ "$RUN_PERFORMANCE" = true ] && run_performance_tests
        [ "$RUN_SECURITY" = true ] && run_security_tests
        [ "$RUN_SMOKE" = true ] && run_smoke_tests
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    generate_report
    
    log_success "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    log_info "üìÅ –û—Ç—á—ë—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${REPORTS_DIR}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
trap 'log_error "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫
parse_args "$@"
main