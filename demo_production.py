#!/usr/bin/env python3
"""
Production Demo –¥–ª—è Vortex-Omega NFCS
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ CI/CD –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import asyncio
import json
import time
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

async def test_symbolic_ai():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è Symbolic AI"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Symbolic AI...")
    
    try:
        from modules.symbolic.symbolic_core import SymbolicCore
        
        symbolic = SymbolicCore()
        text = "The velocity is 10 m/s and the mass is 5 kg"
        
        result = await symbolic.process_text(text)
        
        print(f"‚úÖ Symbolic AI —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   - –ù–∞–π–¥–µ–Ω–æ clauses: {len(result.get('clauses', []))}")
        print(f"   - –ù–∞–π–¥–µ–Ω–æ fields: {len(result.get('fields', []))}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Symbolic AI: {e}")
        return False

async def test_esc_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è ESC"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced ESC...")
    
    try:
        from modules.esc.enhanced_esc import EnhancedESC
        import numpy as np
        
        esc = EnhancedESC()
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞
        result = esc.process_token(
            token_id=1,
            token_embedding=np.random.randn(512),
            timestamp=time.time()
        )
        
        print(f"‚úÖ ESC —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   - Signal: {result['signal']:.4f}")
        print(f"   - Frequency: {result['frequency']:.2f} Hz")
        print(f"   - Memory usage: {esc._check_memory_usage():.2f} MB")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ESC: {e}")
        return False

async def test_kuramoto():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è Kuramoto"""
    print("\nüåä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kuramoto Model...")
    
    try:
        from core.kuramoto_solver_optimized import OptimizedKuramotoSolver
        import numpy as np
        
        kuramoto = OptimizedKuramotoSolver(
            n_oscillators=10,
            natural_frequencies=np.random.randn(10) * 0.5
        )
        
        # –®–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏
        phases = np.random.uniform(0, 2*np.pi, 10)
        new_phases = kuramoto.step(phases, dt=0.01)
        order_param = kuramoto.compute_order_parameter(new_phases)
        
        print(f"‚úÖ Kuramoto —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   - Order parameter: {order_param:.4f}")
        print(f"   - Mean frequency: {np.mean(kuramoto.natural_frequencies):.2f}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Kuramoto: {e}")
        return False

async def test_monitoring():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Monitoring...")
    
    try:
        from monitoring.metrics import MetricsCollector
        
        metrics = MetricsCollector()
        
        # –°–∏–º—É–ª—è—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        metrics.track_request("GET", "/api/test", 200, 0.123)
        metrics.track_symbolic_processing("parse", 0.456, {"entity": 5, "quantity": 3})
        metrics.update_esc_metrics(
            buffer_sizes={"working": 100, "episodic": 500},
            memory_mb=12.5,
            oscillator_count=50
        )
        
        print(f"‚úÖ Monitoring —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   - –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è")
        print(f"   - Prometheus —Ñ–æ—Ä–º–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Monitoring: {e}")
        return False

async def test_docker_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüêã –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    files_to_check = [
        ("Dockerfile", "‚úÖ Dockerfile –Ω–∞–π–¥–µ–Ω"),
        ("docker-compose.yml", "‚úÖ Docker Compose –Ω–∞–π–¥–µ–Ω"),
        (".dockerignore", "‚úÖ .dockerignore –Ω–∞–π–¥–µ–Ω"),
        ("scripts/docker-deploy.sh", "‚úÖ Deployment script –Ω–∞–π–¥–µ–Ω")
    ]
    
    all_found = True
    for file_path, message in files_to_check:
        if os.path.exists(file_path):
            print(f"   {message}")
        else:
            print(f"   ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_found = False
    
    return all_found

async def test_ci_cd_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ CI/CD –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ CI/CD –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    files_to_check = [
        (".gitlab-ci.yml", "‚úÖ GitLab CI –Ω–∞–π–¥–µ–Ω"),
        ("Jenkinsfile", "‚úÖ Jenkins Pipeline –Ω–∞–π–¥–µ–Ω"),
        (".pre-commit-config.yaml", "‚úÖ Pre-commit hooks –Ω–∞–π–¥–µ–Ω—ã"),
        ("pyproject.toml", "‚úÖ Python project config –Ω–∞–π–¥–µ–Ω"),
        ("setup.py", "‚úÖ Setup.py –Ω–∞–π–¥–µ–Ω")
    ]
    
    all_found = True
    for file_path, message in files_to_check:
        if os.path.exists(file_path):
            print(f"   {message}")
        else:
            print(f"   ‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_found = False
    
    return all_found

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ"""
    print("=" * 60)
    print("üöÄ VORTEX-OMEGA NFCS PRODUCTION DEMO")
    print("=" * 60)
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìç –í–µ—Ä—Å–∏—è: 2.5.0")
    print(f"üîß Python: {sys.version.split()[0]}")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    results = []
    
    # –¢–µ—Å—Ç—ã –º–æ–¥—É–ª–µ–π
    results.append(("Symbolic AI", await test_symbolic_ai()))
    results.append(("Enhanced ESC", await test_esc_module()))
    results.append(("Kuramoto Model", await test_kuramoto()))
    results.append(("Monitoring", await test_monitoring()))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    results.append(("Docker Config", await test_docker_config()))
    results.append(("CI/CD Config", await test_ci_cd_config()))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{name:20} {status}")
    
    print("-" * 60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION!")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ CI/CD –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚úÖ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ Pull Request –Ω–∞ GitHub")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub Actions —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("3. –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã (PYPI_API_TOKEN –∏ –¥—Ä.)")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ deployment —á–µ—Ä–µ–∑ docker-deploy.sh")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    
    print("\n" + "=" * 60)
    print("üîó Repository: https://github.com/dukeru115/Vortex-Omega")
    print("üîó PR: https://github.com/dukeru115/Vortex-Omega/pull/new/genspark_ai_developer")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())