# GitLab CI/CD Pipeline –¥–ª—è Vortex-Omega NFCS
# –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí —Å–±–æ—Ä–∫–∞ ‚Üí —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: registry.gitlab.com
  IMAGE_NAME: ${CI_PROJECT_PATH}
  PYTHON_VERSION: "3.11"
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_pass
  REDIS_HOST: redis
  PROMETHEUS_MULTIPROC_DIR: /tmp

stages:
  - validate
  - test
  - build
  - security
  - deploy
  - monitor

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip
    - venv/
    - node_modules/

# ========== VALIDATE STAGE ==========
lint:python:
  stage: validate
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - pip install --cache-dir .cache/pip flake8 black mypy pylint || echo "Failed to install linting tools"
  script:
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ Python..."
    - black --check src/ tests/ || echo "Black formatting issues found"
    - flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503 --exclude=venv,env || echo "Flake8 issues found"
    - pylint src/ --fail-under=7.0 || echo "Pylint issues found"
    - mypy src/ --ignore-missing-imports || echo "Type checking issues found"
  only:
    - branches
    - merge_requests
  allow_failure: true

validate:docker:
  stage: validate
  image: hadolint/hadolint:latest-alpine
  script:
    - echo "üêã –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile..."
    - hadolint Dockerfile
  only:
    - branches
    - merge_requests

validate:yaml:
  stage: validate
  image: alpine:latest
  before_script:
    - apk add --no-cache yamllint
  script:
    - echo "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ YAML —Ñ–∞–π–ª–æ–≤..."
    - yamllint -d relaxed docker-compose.yml
    - yamllint -d relaxed .gitlab-ci.yml
  only:
    - branches
    - merge_requests

# ========== TEST STAGE ==========
test:unit:
  stage: test
  image: python:${PYTHON_VERSION}
  services:
    - postgres:15-alpine
    - redis:7-alpine
  variables:
    DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    REDIS_URL: redis://redis:6379/0
  before_script:
    - pip install --cache-dir .cache/pip -r requirements.txt || echo "Failed to install requirements"
    - pip install --cache-dir .cache/pip -r requirements-dev.txt || echo "Failed to install dev requirements"
  script:
    - echo "üß™ –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤..."
    - |
      if [ -d "tests/" ]; then
        pytest tests/ -v --cov=src --cov-report=term-missing --cov-report=xml --cov-report=html || echo "Some tests failed"
      else
        echo "Tests directory not found"
      fi
    - echo "üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞:"
    - coverage report || echo "Coverage report failed"
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    name: "coverage-${CI_COMMIT_REF_NAME}"
    paths:
      - htmlcov/
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 30 days
    when: always
  only:
    - branches
    - merge_requests
  allow_failure: true

test:integration:
  stage: test
  image: docker:24-cli
  services:
    - docker:24-dind
  before_script:
    - apk add --no-cache docker-compose curl || echo "Failed to install dependencies"
  script:
    - echo "üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    - |
      if [ -f "docker-compose.yml" ]; then
        docker-compose -f docker-compose.yml up -d || echo "Failed to start services"
        sleep 30  # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        docker-compose exec -T vortex-omega pytest tests/integration/ -v || echo "Integration tests failed"
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoints..."
        curl -f http://localhost:8080/health || echo "Health check failed"
        curl -f http://localhost:9090/-/healthy || echo "Prometheus health check failed"
      else
        echo "Docker compose file not found - skipping integration tests"
      fi
  after_script:
    - docker-compose down -v || echo "Failed to stop services"
  only:
    - branches
    - merge_requests
  allow_failure: true

test:performance:
  stage: test
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install --cache-dir .cache/pip locust pytest-benchmark
  script:
    - echo "‚ö° –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    - pytest tests/performance/ --benchmark-only --benchmark-json=benchmark.json
    - echo "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–æ–≤:"
    - python -m pytest_benchmark compare benchmark.json
  artifacts:
    paths:
      - benchmark.json
    expire_in: 30 days
  only:
    - main
    - develop
  allow_failure: true

# ========== BUILD STAGE ==========
build:docker:
  stage: build
  image: docker:24-cli
  services:
    - docker:24-dind
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY} || echo "Registry login failed"
  script:
    - echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    - |
      if docker build -t ${REGISTRY}/${IMAGE_NAME}:${CI_COMMIT_SHA} .; then
        echo "‚úÖ Docker build successful"
        docker build -t ${REGISTRY}/${IMAGE_NAME}:latest .
        echo "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–∞ –≤ registry..."
        docker push ${REGISTRY}/${IMAGE_NAME}:${CI_COMMIT_SHA} || echo "Push failed"
        docker push ${REGISTRY}/${IMAGE_NAME}:latest || echo "Push latest failed"
      else
        echo "‚ùå Docker build failed"
        exit 1
      fi
  only:
    - main
    - develop
    - tags
  allow_failure: true

build:artifacts:
  stage: build
  image: python:${PYTHON_VERSION}
  script:
    - echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..."
    - pip install --cache-dir .cache/pip wheel setuptools
    - python setup.py sdist bdist_wheel
    - echo "üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤:"
    - du -sh dist/*
  artifacts:
    paths:
      - dist/
    expire_in: 30 days
  only:
    - tags

# ========== SECURITY STAGE ==========
security:scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - echo "üîê –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Docker –æ–±—Ä–∞–∑–∞..."
    - trivy image --severity HIGH,CRITICAL ${REGISTRY}/${IMAGE_NAME}:${CI_COMMIT_SHA}
  allow_failure: true
  only:
    - main
    - develop

security:dependencies:
  stage: security
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install --cache-dir .cache/pip safety bandit
  script:
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
    - safety check -r requirements.txt
    - echo "üïµÔ∏è –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞..."
    - bandit -r src/ -f json -o bandit-report.json
  artifacts:
    paths:
      - bandit-report.json
    expire_in: 30 days
  allow_failure: true
  only:
    - main
    - develop

security:secrets:
  stage: security
  image: trufflesecurity/trufflehog:latest
  script:
    - echo "üîë –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ..."
    - trufflehog git file://. --only-verified
  allow_failure: true
  only:
    - branches
    - merge_requests

# ========== DEPLOY STAGE ==========
deploy:staging:
  stage: deploy
  image: alpine:latest
  environment:
    name: staging
    url: https://staging.vortex-omega.example.com
  before_script:
    - apk add --no-cache openssh-client curl
    - mkdir -p ~/.ssh
    - echo "${STAGING_SSH_KEY}" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H ${STAGING_HOST} >> ~/.ssh/known_hosts
  script:
    - echo "üöÄ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ staging..."
    - |
      ssh ${STAGING_USER}@${STAGING_HOST} << EOF
        cd /opt/vortex-omega
        git pull origin develop
        docker-compose pull
        docker-compose up -d --force-recreate
        docker-compose ps
      EOF
    - echo "‚úÖ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health..."
    - curl -f https://staging.vortex-omega.example.com/health || exit 1
  only:
    - develop
  when: manual

deploy:production:
  stage: deploy
  image: alpine:latest
  environment:
    name: production
    url: https://vortex-omega.example.com
  before_script:
    - apk add --no-cache openssh-client curl kubectl
    - mkdir -p ~/.ssh
    - echo "${PRODUCTION_SSH_KEY}" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "${KUBECONFIG_FILE}" > ~/.kube/config
  script:
    - echo "üöÄ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ production..."
    - |
      kubectl set image deployment/vortex-omega \
        vortex-omega=${REGISTRY}/${IMAGE_NAME}:${CI_COMMIT_SHA} \
        --namespace=production
    - kubectl rollout status deployment/vortex-omega --namespace=production
    - echo "‚úÖ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
  only:
    - tags
  when: manual
  allow_failure: false

deploy:rollback:
  stage: deploy
  image: alpine:latest
  environment:
    name: production
  before_script:
    - apk add --no-cache kubectl
    - echo "${KUBECONFIG_FILE}" > ~/.kube/config
  script:
    - echo "‚èÆÔ∏è –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    - kubectl rollout undo deployment/vortex-omega --namespace=production
    - kubectl rollout status deployment/vortex-omega --namespace=production
  only:
    - main
  when: manual

# ========== MONITOR STAGE ==========
monitor:metrics:
  stage: monitor
  image: curlimages/curl:latest
  script:
    - echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫..."
    - curl -s http://prometheus:9090/api/v1/query?query=up | grep "vortex-omega"
    - echo "‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
  only:
    - main
    - develop
  allow_failure: true

monitor:alerts:
  stage: monitor
  image: curlimages/curl:latest
  script:
    - echo "üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤..."
    - curl -s http://prometheus:9090/api/v1/alerts | grep -v "firing" || echo "‚ö†Ô∏è –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"
  only:
    - main
  allow_failure: true

# ========== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ó–ê–î–ê–ß–ò ==========
pages:
  stage: deploy
  dependencies:
    - test:unit
  script:
    - echo "üìö –ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
    - mkdir -p public
    - cp -r htmlcov/* public/
  artifacts:
    paths:
      - public
  only:
    - main