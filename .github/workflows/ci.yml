name: Advanced CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/*', 'genspark_ai_developer']
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'  # Daily security scan

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 80

jobs:
  # Code Quality Check
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint mypy bandit safety black isort flake8 pre-commit
          python -m spacy download en_core_web_sm || true

      - name: Run Black formatter check
        run: black --check src/ tests/

      - name: Run isort import checker
        run: isort --check-only src/ tests/

      - name: Run Flake8 linter
        run: flake8 src/ tests/ --max-line-length=120 --extend-ignore=E203,W503

      - name: Run Pylint
        run: pylint src/ --fail-under=8.0 || true

      - name: Run MyPy type checker
        run: mypy src/ --ignore-missing-imports || true

  # Security Scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety pip-audit semgrep

      - name: Run Bandit security linter
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Safety dependency check
        run: safety check --json || true

      - name: Run pip-audit
        run: pip-audit || true

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  # Unit & Integration Tests
  test:
    name: Tests - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-xdist hypothesis
          python -m spacy download en_core_web_sm || true

      - name: Run unit tests with coverage
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --timeout=300 \
            -n auto \
            -v

      - name: Check coverage threshold
        run: |
          coverage report --fail-under=${{ env.COVERAGE_THRESHOLD }} || echo "Coverage below threshold"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-${{ matrix.python-version }}

  # Performance Testing
  performance:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install locust pytest-benchmark memory_profiler

      - name: Run performance benchmarks
        run: |
          python -m pytest tests/benchmarks/ --benchmark-only --benchmark-json=benchmark.json || true

      - name: Memory profiling
        run: |
          python -m memory_profiler tests/memory_tests.py || true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark.json

  # Build Docker Image
  docker:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: vortex-omega:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}

      - name: Run Docker container tests
        run: |
          docker run --rm vortex-omega:latest python -m pytest tests/ || true

  # Documentation Build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install doc dependencies
        run: |
          pip install sphinx sphinx-rtd-theme autodoc myst-parser

      - name: Build documentation
        run: |
          sphinx-build -b html docs/ docs/_build || true

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build

  # Dependency Check
  dependencies:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Vortex-Omega'
          path: '.'
          format: 'HTML'

      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  # Release (only on main branch)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [quality, security, test, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        run: |
          echo "## Changes" > CHANGELOG_RELEASE.md
          git log --pretty=format:"- %s" HEAD~10..HEAD >> CHANGELOG_RELEASE.md

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body_path: CHANGELOG_RELEASE.md
          draft: false
          prerelease: false