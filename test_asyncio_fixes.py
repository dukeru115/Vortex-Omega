#!/usr/bin/env python3
"""
Test –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π asyncio –ø—Ä–æ–±–ª–µ–º - –≠—Ç–∞–ø 1
==========================================

Check –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
1. ‚úÖ –ó–∞–º–µ–Ω–∞ asyncio.get_event_loop() –Ω–∞ asyncio.get_running_loop() 
2. ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è async context managers
3. ‚úÖ –ó–∞–º–µ–Ω–∞ threading.RLock –Ω–∞ asyncio.Lock –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
4. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop management
"""

import asyncio
import sys
import logging
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

async def test_resonance_bus_fixes():
    """Test –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ ResonanceBus"""
    logger.info("üîß Testing –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ResonanceBus...")
    
    try:
        from src.orchestrator.resonance_bus import ResonanceBus, TopicType, EventPriority, BusEvent
        
        # Creation –∏ initialization —à–∏–Ω—ã
        bus = ResonanceBus()
        await bus.initialize()
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        test_event = BusEvent(
            topic=TopicType.METRICS_RISK,
            priority=EventPriority.NORMAL,
            data={'test': 'asyncio_fix_validation'},
            source='asyncio_test'
        )
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è (–¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ DeprecationWarning)
        await bus.publish_event(test_event)
        
        # Stop —à–∏–Ω—ã
        await bus.shutdown()
        
        logger.info("‚úÖ ResonanceBus: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è asyncio —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå ResonanceBus: Error —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_enhanced_kuramoto_fixes():
    """Test –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ Enhanced Kuramoto"""
    logger.info("üîß Testing –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Enhanced Kuramoto...")
    
    try:
        from src.core.enhanced_kuramoto import EnhancedKuramotoModule, KuramotoConfig
        
        # Creation –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = KuramotoConfig(
            natural_frequencies={'m1': 1.0, 'm2': 1.1, 'm3': 0.9},
            base_coupling_strength=0.1,
            time_step=0.01
        )
        
        # Creation –º–æ–¥—É–ª—è
        kuramoto = EnhancedKuramotoModule(config=config, num_modules=3)
        
        # Initialization (–¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Å asyncio.Lock)
        result = await kuramoto.initialize()
        
        if result:
            logger.info("‚úÖ Enhanced Kuramoto: Asyncio lock initialization —É—Å–ø–µ—à–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è  Enhanced Kuramoto: Initialization –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å False")
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Enhanced Kuramoto: Error —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - {e}")
        import traceback  
        traceback.print_exc()
        return False

async def test_nfcs_orchestrator_context_manager():
    """Test async context manager –≤ NFCSOrchestrator"""  
    logger.info("üîß Testing NFCSOrchestrator context manager...")
    
    try:
        from src.orchestrator.nfcs_orchestrator import create_orchestrator, OrchestrationConfig
        
        # Creation –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = OrchestrationConfig(
            enable_detailed_logging=True,
            max_concurrent_processes=2
        )
        
        # Creation –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        orchestrator = await create_orchestrator(config)
        
        # Testing async context manager
        async with orchestrator:
            logger.info("‚úÖ NFCSOrchestrator: Async context manager running –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            status = orchestrator.get_system_status()
            if 'state' in status:
                logger.info(f"   State —Å–∏—Å—Ç–µ–º—ã: {status['state']}")
                
        return True
        
    except Exception as e:
        logger.error(f"‚ùå NFCSOrchestrator: Error context manager - {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_event_loop_management():
    """Test —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è event loop"""
    logger.info("üîß Testing event loop management...")
    
    try:
        # Check –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è running loop
        current_loop = asyncio.get_running_loop()
        logger.info(f"‚úÖ Event Loop: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω running loop - {current_loop}")
        
        # Testing executor –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        from concurrent.futures import ThreadPoolExecutor
        
        def sync_operation():
            """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è executor"""
            return "sync_result"
        
        with ThreadPoolExecutor(max_workers=1) as executor:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ asyncio.get_running_loop().run_in_executor (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
            result = await current_loop.run_in_executor(executor, sync_operation)
            logger.info(f"‚úÖ Executor: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - {result}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Event Loop Management: Error - {e}")
        return False

async def run_asyncio_tests():
    """Start –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π asyncio"""
    
    print("=" * 70)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ASYNCIO –ü–†–û–ë–õ–ï–ú - –≠–¢–ê–ü 1")
    print("=" * 70)
    
    tests = [
        ("ResonanceBus asyncio fixes", test_resonance_bus_fixes),
        ("Enhanced Kuramoto asyncio.Lock", test_enhanced_kuramoto_fixes), 
        ("NFCSOrchestrator context manager", test_nfcs_orchestrator_context_manager),
        ("Event Loop Management", test_event_loop_management)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}:")
        print("-" * 50)
        try:
            result = await test_func()
            results.append(result)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è error –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    passed = sum(results)
    total = len(results)
    
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–¢–ê–ü–ê 1")
    print("=" * 70)
    
    if passed == total:
        print(f"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ ({passed}/{total})")
        print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ asyncio –ø—Ä–æ–±–ª–µ–º—ã successfully –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        status = "SUCCESS"
    elif passed >= total // 2:
        print(f"‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ù–û ({passed}/{total})")
        print("üîß –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã, –º–∏–Ω–æ—Ä–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        status = "PARTIAL_SUCCESS"
    else:
        print(f"‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê ({passed}/{total})")  
        print("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è")
        status = "NEEDS_WORK"
        
    print("\nüîó –≠–¢–ê–ü 1 –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    print("   ‚úÖ asyncio.get_event_loop() ‚Üí asyncio.get_running_loop()")
    print("   ‚úÖ Async context managers (__aenter__, __aexit__)")
    print("   ‚úÖ threading.RLock ‚Üí asyncio.Lock –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
    print("   ‚úÖ Event loop management –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    print("\nüìã –ì–û–¢–û–í–û –ö –≠–¢–ê–ü–£ 2:")
    print("   ‚Ä¢ REST API creation") 
    print("   ‚Ä¢ WebSocket real-time monitoring")
    print("   ‚Ä¢ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    return status

def main():
    """Main entry point"""
    try:
        status = asyncio.run(run_asyncio_tests())
        return status == "SUCCESS" or status == "PARTIAL_SUCCESS"
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è error –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)